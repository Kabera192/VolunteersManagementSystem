/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Opportunities;
import model.Organization;
import services.OpportunitiesService;
import services.OrganizationService;

/**
 *
 * @author kanimbajustine
 */
public class OpportunitiesFrame extends javax.swing.JFrame {
    
    DefaultTableModel tableModel = new DefaultTableModel();
    public Organization org;
//    public int orgId;
    public int oppId;
//    public Organization orgToUpdate;
    
    /**
     * Creates new form Opportunities
     */
    
    public OpportunitiesFrame() {
        initComponents();
        addColumns();
    }

    public OpportunitiesFrame(Organization org) {
        initComponents();
        this.org = org;
        orgName.setText(org.getOrgId()+" - "+ org.getOrgName());
//        orgId = org.getOrgId();
        addColumns();
        retrieveOpportunities();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        header = new javax.swing.JPanel();
        headLabel = new javax.swing.JLabel();
        orgName = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        oppTitle = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        oppDescription = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        oppSkills = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        oppTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        oppLocation = new javax.swing.JTextField();
        oppSlots = new javax.swing.JTextField();
        oppStart = new com.toedter.calendar.JDateChooser();
        oppEnd = new com.toedter.calendar.JDateChooser();
        saveBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        reportBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bg.setBackground(new java.awt.Color(255, 255, 255));

        header.setBackground(new java.awt.Color(255, 102, 102));
        header.setForeground(new java.awt.Color(255, 255, 255));

        headLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        headLabel.setForeground(new java.awt.Color(255, 255, 255));
        headLabel.setText("Create An Opportunity");

        orgName.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        orgName.setForeground(new java.awt.Color(255, 255, 255));

        logoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        logoutBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        logoutBtn.setForeground(new java.awt.Color(255, 255, 255));
        logoutBtn.setText("Logout");
        logoutBtn.setBorder(null);
        logoutBtn.setBorderPainted(false);
        logoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(headLabel)
                .addGap(202, 202, 202)
                .addComponent(orgName, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headLabel)
                    .addComponent(orgName))
                .addGap(10, 10, 10))
            .addGroup(headerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Opportunity Title:");

        jLabel3.setText("Opportunity Description");

        jLabel4.setText("Opportunity Skills");

        oppDescription.setColumns(20);
        oppDescription.setRows(5);
        jScrollPane1.setViewportView(oppDescription);

        oppSkills.setColumns(20);
        oppSkills.setRows(5);
        jScrollPane2.setViewportView(oppSkills);

        oppTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        oppTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oppTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(oppTable);

        jLabel5.setText("Location");

        jLabel6.setText("Slots Available");

        jLabel7.setText("Start Date");

        jLabel8.setText("End Date");

        saveBtn.setBackground(new java.awt.Color(0, 153, 102));
        saveBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveBtn.setText("Save");
        saveBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        saveBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        saveBtn.setOpaque(true);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(204, 0, 0));
        deleteBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("Delete");
        deleteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteBtn.setOpaque(true);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(0, 102, 204));
        updateBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateBtn.setText("Update");
        updateBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateBtn.setOpaque(true);
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        reportBtn.setBackground(new java.awt.Color(255, 255, 255));
        reportBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        reportBtn.setText("Opportunities Report");
        reportBtn.setBorder(null);
        reportBtn.setBorderPainted(false);
        reportBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(bgLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(122, 122, 122)
                        .addComponent(oppTitle))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(115, 115, 115)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(oppSlots, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oppLocation, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oppStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(oppEnd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(reportBtn))
                .addContainerGap(30, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(oppTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(oppLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(oppSlots, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(oppStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(oppEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        saveOpp();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        updateOpp();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void oppTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_oppTableMouseClicked
        int selectedRowIndex = oppTable.getSelectedRow();

        oppId = Integer.parseInt(tableModel.getValueAt(selectedRowIndex, 0).toString());
        oppTitle.setText(tableModel.getValueAt(selectedRowIndex, 1).toString());
        oppDescription.setText(tableModel.getValueAt(selectedRowIndex, 2).toString());
        oppSkills.setText(tableModel.getValueAt(selectedRowIndex, 3).toString());
        oppLocation.setText(tableModel.getValueAt(selectedRowIndex, 4).toString());
        oppSlots.setText(tableModel.getValueAt(selectedRowIndex, 5).toString());
        oppStart.setDate((Date)tableModel.getValueAt(selectedRowIndex, 6));
        oppEnd.setDate((Date)tableModel.getValueAt(selectedRowIndex, 7));
//        orgToUpdate = (Organization)tableModel.getValueAt(selectedRowIndex, 8);
        
    }//GEN-LAST:event_oppTableMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deleteOpp();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        LoginOrgForm login = new LoginOrgForm();
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void reportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportBtnActionPerformed
        try{
            Registry reg = LocateRegistry.getRegistry("127.0.0.1", 8000);
            OpportunitiesService oppSrv = (OpportunitiesService) reg.lookup("opportunities");
            List<Opportunities> oppList = oppSrv.viewOppByOrg(org);
            
            createReport(oppList);
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_reportBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OpportunitiesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OpportunitiesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OpportunitiesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OpportunitiesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OpportunitiesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel headLabel;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextArea oppDescription;
    private com.toedter.calendar.JDateChooser oppEnd;
    private javax.swing.JTextField oppLocation;
    private javax.swing.JTextArea oppSkills;
    private javax.swing.JTextField oppSlots;
    private com.toedter.calendar.JDateChooser oppStart;
    private javax.swing.JTable oppTable;
    private javax.swing.JTextField oppTitle;
    private javax.swing.JLabel orgName;
    private javax.swing.JButton reportBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    private void saveOpp() {
        if(oppTitle.getText().trim().isEmpty() || oppDescription.getText().trim().isEmpty() || oppSkills.getText().trim().isEmpty() || oppLocation.getText().trim().isEmpty() || oppSlots.getText().trim().isEmpty() || oppStart.getDate() == null || oppEnd.getDate() == null){
            JOptionPane.showMessageDialog(this, 
                    "All fields are required",
                    "Error!",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(oppStart.getDate().compareTo(oppEnd.getDate()) > 0 || oppStart.getDate().compareTo(oppEnd.getDate()) == 0){
            JOptionPane.showMessageDialog(this,
                    "The start date can not be after the end date!\nNeither can the start date be the same as the end date!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            Opportunities oppObj = new Opportunities();
            
            oppObj.setOppTitle(oppTitle.getText());
            oppObj.setOppDescription(oppDescription.getText());
            oppObj.setOppSkills(oppSkills.getText());
            oppObj.setOppLocation(oppLocation.getText());
            oppObj.setOppSlots(Integer.parseInt(oppSlots.getText()));
            oppObj.setOppStartDate(oppStart.getDate());
            oppObj.setOppEndDate(oppEnd.getDate());
            oppObj.setOrganization(org);
            
            Registry reg = LocateRegistry.getRegistry("127.0.0.1", 8000);
            OpportunitiesService oppSrv = (OpportunitiesService) reg.lookup("opportunities");
            String feedback = oppSrv.createOpp(oppObj);
            JOptionPane.showMessageDialog(this, feedback);
            
            tableModel = new DefaultTableModel();
            addColumns();
            retrieveOpportunities();
            clearFields();
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    private void addColumns() {
        tableModel.addColumn("Id");
        tableModel.addColumn("Title");
        tableModel.addColumn("Description");
        tableModel.addColumn("Skills Required");
        tableModel.addColumn("Location");
        tableModel.addColumn("Slots Available");
        tableModel.addColumn("Start Date");
        tableModel.addColumn("End Date");
        tableModel.addColumn("Organization");
        
        oppTable.setModel(tableModel);
    }

    private void retrieveOpportunities() {
        try{
            Registry reg = LocateRegistry.getRegistry("127.0.0.1", 8000);
            OpportunitiesService oppSrv = (OpportunitiesService)reg.lookup("opportunities");
            List<Opportunities> oppList = oppSrv.viewOppByOrg(org);
            
            for(Opportunities opp : oppList){
                tableModel.addRow(new Object[]{
                    opp.getOppId(),
                    opp.getOppTitle(),
                    opp.getOppDescription(),
                    opp.getOppSkills(),
                    opp.getOppLocation(),
                    opp.getOppSlots(),
                    opp.getOppStartDate(),
                    opp.getOppEndDate(),
                    opp.getOrganization().getOrgId()
                });
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
//    private Organization retrieveOrg(){
//        try{
//            Registry reg = LocateRegistry.getRegistry("127.0.0.1", 8000);
//            OrganizationService orgSrv = (OrganizationService)reg.lookup("organization");
//            orgToUpdate = orgSrv.searchOrgById(org);
//        }catch(Exception e){
//            e.printStackTrace();
//        }
//        return null;
//    }

    private void updateOpp() {
        try{
            Opportunities oppObj = new Opportunities();
            
            oppObj.setOppId(oppId);
            oppObj.setOppTitle(oppTitle.getText());
            oppObj.setOppDescription(oppDescription.getText());
            oppObj.setOppSkills(oppSkills.getText());
            oppObj.setOppLocation(oppLocation.getText());
            oppObj.setOppSlots(Integer.parseInt(oppSlots.getText()));
            oppObj.setOppStartDate(oppStart.getDate());
            oppObj.setOppEndDate(oppEnd.getDate());
            oppObj.setOrganization(org);
            
            int option = JOptionPane.showConfirmDialog(this, 
                    "Are you sure you want to permanently change this record?",
                    "Warning",
                    JOptionPane.YES_NO_OPTION);
            if(option == 0){
                Registry reg = LocateRegistry.getRegistry("127.0.0.1", 8000);
                OpportunitiesService oppSrv = (OpportunitiesService)reg.lookup("opportunities");
                String feedback = oppSrv.updateOpp(oppObj);
                JOptionPane.showMessageDialog(this, feedback);
                
                tableModel = new DefaultTableModel();
                addColumns();
                retrieveOpportunities();
                clearFields();
            }else return;
            
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    private void deleteOpp() {
        try{
            Opportunities oppObj = new Opportunities();
            
            oppObj.setOppId(oppId);
            oppObj.setOppTitle(oppTitle.getText());
            oppObj.setOppDescription(oppDescription.getText());
            oppObj.setOppSkills(oppSkills.getText());
            oppObj.setOppLocation(oppLocation.getText());
            oppObj.setOppSlots(Integer.parseInt(oppSlots.getText()));
            oppObj.setOppStartDate(oppStart.getDate());
            oppObj.setOppEndDate(oppEnd.getDate());
            oppObj.setOrganization(org);
            
            int option = JOptionPane.showConfirmDialog(this, 
                    "Are you sure you want to permanently delete this record?",
                    "Warning",
                    JOptionPane.YES_NO_OPTION);
            if(option == 0){
                Registry reg = LocateRegistry.getRegistry("127.0.0.1", 8000);
                OpportunitiesService oppSrv = (OpportunitiesService)reg.lookup("opportunities");
                String feedback = oppSrv.deleteOpp(oppObj);
                JOptionPane.showMessageDialog(this, feedback);
                
                tableModel = new DefaultTableModel();
                addColumns();
                retrieveOpportunities();
                clearFields();
            }else return;
        }catch(Exception e){
            e.printStackTrace();
        } 
    }
    
    private void clearFields(){
        oppTitle.setText("");
        oppDescription.setText("");
        oppSkills.setText("");
        oppLocation.setText("");
        oppSlots.setText("");
        oppStart.setDate(null);
        oppEnd.setDate(null);
    }

    private void createReport(List<Opportunities> oppList) {
        try {
            // Create a file chooser to select the save location
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showSaveDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                // Get the selected file
                File file = fileChooser.getSelectedFile();

                // Append the ".pdf" extension if not already present
                if (!file.getAbsolutePath().endsWith(".pdf")) {
                    file = new File(file.getAbsolutePath() + ".pdf");
                }

                // Create a new PDF document
                Document document = new Document();
                PdfWriter.getInstance(document, new FileOutputStream(file));
                document.open();

                // Write the table data to the PDF document
                for (Opportunities opp : oppList) {
                    document.add(new Paragraph(opp.toString()));
                }

                // Close the PDF document
                document.close();

                // Show a success message
                JOptionPane.showMessageDialog(this, "Table data saved as PDF successfully!");
            }
        } catch (IOException | DocumentException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving table data as PDF: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
